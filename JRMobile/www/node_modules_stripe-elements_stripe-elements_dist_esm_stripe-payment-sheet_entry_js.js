"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_stripe-elements_stripe-elements_dist_esm_stripe-payment-sheet_entry_js"],{

/***/ 8210:
/*!**********************************************************************************************!*\
  !*** ./node_modules/@stripe-elements/stripe-elements/dist/esm/stripe-payment-sheet.entry.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stripe_payment_sheet": () => (/* binding */ StripePaymentSheet)
/* harmony export */ });
/* harmony import */ var e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-a7e5d6fd.js */ 5893);


const stripePaymentSheetModalCss = ":host{display:block}";
const StripePaymentSheet = class {
  constructor(hostRef) {
    (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.closed = (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "closed", 7);
    /**
     * Show the form label
     */

    this.showLabel = false;
    /**
     * The component will provide a function to call the `stripe.confirmCardPayment`API.
     * If you want to customize the behavior, should set false.
     * And listen the 'formSubmit' event on the element
     */

    this.shouldUseDefaultFormSubmitAction = true;
    /**
     * Default submit handle type.
     * If you want to use `setupIntent`, should update this attribute.
     * @example
     * ```
     * <stripe-payment-sheet intent-type="setup" />
     * ```
     */

    this.intentType = 'payment';
    /**
     * If true, the modal display close button
     */

    this.showCloseButton = true;
    /**
     * If true, show zip code field
     */

    this.zip = true;
    /**
     * Modal state.
     * If true, the modal will open
     */

    this.open = false;
  }

  componentDidLoad() {
    const modal = this.el.querySelector('stripe-sheet');
    modal.addEventListener('close', () => {
      this.closed.emit();
    });
  }
  /**
   * Get the inner component
   */


  getStripePaymentSheetElement() {
    var _this = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this.el.querySelector('stripe-payment');
    })();
  }
  /**
   * open modal
   */


  present() {
    var _this2 = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this2.open = true;
      return new Promise((resolve, reject) => {
        const paymentSheet = _this2.el.querySelector('stripe-payment');

        paymentSheet.addEventListener('formSubmit', /*#__PURE__*/function () {
          var _ref = (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (props) {
            resolve(props);
          });

          return function (_x) {
            return _ref.apply(this, arguments);
          };
        }());

        _this2.el.addEventListener('closed', () => reject());
      });
    })();
  }
  /**
   * Update Stripe client loading process
   */


  updateProgress(progress) {
    var _this3 = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const paymentSheet = _this3.el.querySelector('stripe-payment');

      return paymentSheet.updateProgress(progress);
    })();
  }
  /**
   * Remove the modal
   */


  destroy() {
    var _this4 = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const paymentSheet = _this4.el.querySelector('stripe-payment');

      paymentSheet.remove();

      _this4.el.remove();
    })();
  }
  /**
   *
   * Add payment request button
   */


  setPaymentRequestButton(options) {
    var _this5 = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const elements = _this5.el.getElementsByTagName('stripe-payment');

      if (elements.length < 1) {
        return;
      }

      const paymentSheetElement = elements[0];

      if (!paymentSheetElement) {
        return;
      }

      paymentSheetElement.setAttribute('show-payment-request-button', 'true');

      if (_this5.applicationName) {
        paymentSheetElement.setAttribute('application-name', _this5.applicationName);
      }

      paymentSheetElement.setPaymentRequestOption(options);
    })();
  }

  render() {
    return (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.h)("stripe-sheet", {
      open: this.open,
      showCloseButton: this.showCloseButton
    }, (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.h)("stripe-payment", {
      showLabel: this.showLabel,
      publishableKey: this.publishableKey,
      intentClientSecret: this.intentClientSecret,
      shouldUseDefaultFormSubmitAction: this.shouldUseDefaultFormSubmitAction,
      handleSubmit: this.handleSubmit,
      stripeDidLoaded: this.stripeDidLoaded,
      intentType: this.intentType,
      zip: this.zip,
      buttonLabel: this.buttonLabel,
      sheetTitle: this.sheetTitle,
      applicationName: this.applicationName
    }));
  }

  get el() {
    return (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

};
StripePaymentSheet.style = stripePaymentSheetModalCss;


/***/ })

}]);
//# sourceMappingURL=node_modules_stripe-elements_stripe-elements_dist_esm_stripe-payment-sheet_entry_js.js.map