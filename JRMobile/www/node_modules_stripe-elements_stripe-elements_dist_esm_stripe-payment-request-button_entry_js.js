"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_stripe-elements_stripe-elements_dist_esm_stripe-payment-request-button_entry_js"],{

/***/ 1091:
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@stripe-elements/stripe-elements/dist/esm/stripe-payment-request-button.entry.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stripe_payment_request_button": () => (/* binding */ StripePaymentRequestButton)
/* harmony export */ });
/* harmony import */ var e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-a7e5d6fd.js */ 5893);
/* harmony import */ var _stripe_esm_ea56157a_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stripe.esm-ea56157a.js */ 912);



const stripePaymentRequestButtonCss = ":host{display:block}";
const StripePaymentRequestButton = class {
  constructor(hostRef) {
    (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.stripeLoaded = (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "stripeLoaded", 7);
    this.loadStripeStatus = '';
    /**
     * Overwrite the application name that registered
     * For wrapper library (like Capacitor)
     */

    this.applicationName = '@stripe-elements/stripe-elements';

    if (this.publishableKey !== undefined && this.paymentRequestOption !== undefined) {
      this.initStripe(this.publishableKey, {
        stripeAccount: this.stripeAccount
      });
    } else {
      this.loadStripeStatus = 'failure';
    }
  }
  /**
   * Check isAvailable ApplePay or GooglePay.
   * If you run this method, you should run before initStripe.
   */


  isAvailable(type) {
    var _this = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this.publishableKey === undefined) {
        throw 'You should run this method run, after set publishableKey.';
      }

      const stripe = yield (0,_stripe_esm_ea56157a_js__WEBPACK_IMPORTED_MODULE_2__.l)(_this.publishableKey, {
        stripeAccount: _this.stripeAccount
      });
      const paymentRequest = stripe.paymentRequest({
        country: 'US',
        currency: 'usd',
        total: {
          label: 'Demo total',
          amount: 1099
        },
        disableWallets: ['applePay', 'googlePay', 'browserCard'].filter(method => method !== type)
      });
      const paymentRequestSupport = yield paymentRequest.canMakePayment();

      if (!paymentRequestSupport || type === 'applePay' && !paymentRequestSupport[type] || type === 'googlePay' && !paymentRequestSupport[type]) {
        throw 'This device can not use.';
      }
    })();
  }
  /**
   * Register event handler for `paymentRequest.on('paymentmethod'` event.
   */


  setPaymentMethodEventHandler(handler) {
    var _this2 = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this2.paymentMethodEventHandler = handler;
    })();
  }
  /**
   * Register event handler for `paymentRequest.on('shippingoptionchange'` event.
   */


  setPaymentRequestShippingOptionEventHandler(handler) {
    var _this3 = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this3.shippingOptionEventHandler = handler;
    })();
  }
  /**
   * Register event handler for `paymentRequest.on('shippingaddresschange'` event.
   */


  setPaymentRequestShippingAddressEventHandler(handler) {
    var _this4 = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this4.shippingAddressEventHandler = handler;
    })();
  }

  stripeLoadedEventHandler() {
    const event = {
      stripe: this.stripe
    };

    if (this.stripeDidLoaded) {
      this.stripeDidLoaded(event);
    }

    this.stripeLoaded.emit(event);
  }
  /**
   * @param option
   * @private
   */


  setPaymentRequestOption(option) {
    var _this5 = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this5.paymentRequestOption = option;
      return _this5;
    })();
  }
  /**
   * Get Stripe.js, and initialize elements
   * @param publishableKey
   * @param options
   */


  initStripe(publishableKey, options = undefined) {
    var _this6 = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this6.loadStripeStatus = 'loading';
      (0,_stripe_esm_ea56157a_js__WEBPACK_IMPORTED_MODULE_2__.l)(publishableKey, {
        stripeAccount: options === null || options === void 0 ? void 0 : options.stripeAccount
      }).then(stripe => {
        _this6.loadStripeStatus = 'success';
        stripe.registerAppInfo({
          name: _this6.applicationName
        });
        _this6.stripe = stripe;
        return;
      }).catch(e => {
        console.log(e);
        _this6.loadStripeStatus = 'failure';
        return;
      }).then(() => {
        if (!_this6.stripe) {
          return;
        } // 後方互換のため、明確にfalseにしていないものはtrue扱い


        return _this6.initElement(!(options === null || options === void 0 ? void 0 : options.showButton) === false);
      }).then(() => {
        if (!_this6.stripe) {
          return;
        }

        _this6.stripeLoadedEventHandler();
      });
    })();
  }
  /**
   * Initialize Component using Stripe Element
   */


  initElement(showButton = true) {
    var _this7 = this;

    return (0,e_Capstone_JRMobile_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const paymentRequest = _this7.stripe.paymentRequest(_this7.paymentRequestOption); // Check if the Payment Request is available (or Apple Pay on the Web).


      const paymentRequestSupport = yield paymentRequest.canMakePayment();

      if (!paymentRequestSupport) {
        throw 'paymentRequest is not support.';
      }

      if (_this7.paymentMethodEventHandler) {
        paymentRequest.on('paymentmethod', event => {
          _this7.paymentMethodEventHandler(event, _this7.stripe);
        });
      }

      if (_this7.shippingOptionEventHandler) {
        paymentRequest.on('shippingoptionchange', event => {
          _this7.shippingOptionEventHandler(event, _this7.stripe);
        });
      }

      if (_this7.shippingAddressEventHandler) {
        paymentRequest.on('shippingaddresschange', event => {
          _this7.shippingAddressEventHandler(event, _this7.stripe);
        });
      }

      if (showButton) {
        // Display the Pay button by mounting the Element in the DOM.
        const elements = _this7.stripe.elements();

        const paymentRequestButton = elements.create('paymentRequestButton', {
          paymentRequest
        });

        const paymentRequestButtonElement = _this7.el.querySelector('#payment-request-button');

        paymentRequestButton.mount(paymentRequestButtonElement); // Show the payment request section.

        _this7.el.querySelector('#payment-request').classList.add('visible');
      } else {
        /**
         * This method must be called as the result of a user interaction (for example, in a click handler).
         * https://stripe.com/docs/js/payment_request/show
         */
        paymentRequest.show();
      }
    })();
  }

  render() {
    return (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.H, null, (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      id: "payment-request"
    }, (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      id: "payment-request-button"
    })), (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null));
  }

  get el() {
    return (0,_index_a7e5d6fd_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

};
StripePaymentRequestButton.style = stripePaymentRequestButtonCss;


/***/ })

}]);
//# sourceMappingURL=node_modules_stripe-elements_stripe-elements_dist_esm_stripe-payment-request-button_entry_js.js.map